// Generated by turbo-cli at {{.Timestamp}}
import { {{.Name}}Schema } from '../../schemas/models';
import { ServerError, UserFacingError, NoContentError } from '@papito/shared/errors';
import { createSchema } from '@papito/shared/utils';
import { FastifyInstance } from 'fastify';
import { getOrCreate{{.Name | title}}Service } from '~/services/{{.Name}}.service';
import { SCHEMA_KEYS } from '~/utils/constants';

const {{.Name}}Service = getOrCreate{{.Name | title}}Service();
const { getAllSchema, createOneSchema } = createSchema(SCHEMA_KEYS.{{.Name | upper}}, {{.Name}}Schema);

export async function {{.Name}}Controller(fastify: FastifyInstance) {
    fastify.get('/', { schema: getAllSchema }, async (_, reply) => {
        try {
            const data = await {{.Name}}Service.getAll();

            if (!data) {
                return new NoContentError('Data not found');
            }
            return reply.send({ data, count: data.length });
        } catch (error) {
            throw new ServerError('Failed to get {{.Name}} data: ' + error);
        }
    });

    fastify.post(
        '/',
        {
            schema: createOneSchema,
        },
        async (request, reply) => {
            try {
                const payload = request.body as any;
                if (!payload) {
                    return new UserFacingError('Missing required fields');
                }
                const result = await {{.Name}}Service.create(payload);
                return reply.send({
                    message: '{{.Name | title}} created successfully',
                    state: 'success',
                    data: result
                });
            } catch (error) {
                throw new ServerError('Failed to create {{.Name}}: ' + error);
            }
        },
    );
}
