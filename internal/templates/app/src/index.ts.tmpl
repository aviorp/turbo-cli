// Generated by turbo-cli at {{.Timestamp}}
import { ServerBootstrap } from '@papito/bootstrap';
import { ServerError } from '@papito/shared/errors';
import dotenv from 'dotenv';
import { FastifyPluginAsync } from 'fastify';
import { v1Routes } from '~/routes/v1';

dotenv.config();

/**
 * this file is the main entry point for the application
 * it creates a new instance of the server and registers the routes, rest of configurations is already made in the bootstrap package.
 * all you need to do is to register the routes and start the server, you can also register the swagger documentation here.
 * if you need to implement any other configuration, you have access to "app" instance of the server.
 * connection to database can be done here by calling "registerPostgres" method, it expects a connection string as an argument.
 * @returns void
 */

export default async function main() {
	try {
		const server = new ServerBootstrap({ port: +process.env.PORT!, moduleName: "{{.Name}}" });
		// necessary to extract the user context from the request
		await server.initializeAuthHook();
		await server.registerSwagger();
		// await server.registerPostgres(process.env.DATABASE_URL!);
		await server.registerRoutes([
			{
				plugin: v1Routes as FastifyPluginAsync,
				options: {
					prefix: '/v1',
				},
			},
		]);

		await server.start();
	} catch (error) {
		new ServerError('Failed to start server: \n' + error);
		process.exit(1);
	}
}

await main();
